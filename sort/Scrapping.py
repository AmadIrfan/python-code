# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Scrapping2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets 
from PyQt5.QtCore import QTimer
from tkinter import messagebox
import time
# from __future__ import print_function
# from cgi import print_arguments
from time import sleep
from selenium import webdriver
from bs4 import BeautifulSoup
import pandas as pd
from webdriver_manager.chrome import ChromeDriverManager
chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')



class Ui_ScrappingWindow(object):
    def setupUi(self, MainWindow):
        valueofstop=1234
        def value():
             x=900
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1089, 579)
        MainWindow.setMaximumSize(QtCore.QSize(1089, 579))
        font = QtGui.QFont()
        font.setFamily("SimSun-ExtB")
        font.setPointSize(8)
        MainWindow.setFont(font)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("#centralwidget\n"
"{backgroound colour:#1b1b27}")
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 540, 1091, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setStyleSheet("background-color: rgb(40, 43, 122);\n"
"background-color: rgb(0, 5, 39);")
        self.label.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label.setTextFormat(QtCore.Qt.RichText)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(False)
        self.label.setIndent(-1)
        self.label.setObjectName("label")
        self.Menu_Label = QtWidgets.QLabel(self.centralwidget)
        self.Menu_Label.setGeometry(QtCore.QRect(0, 70, 171, 471))
        self.Menu_Label.setStyleSheet("background-color:  rgb(0, 8, 67);")
        self.Menu_Label.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.Menu_Label.setText("")
        self.Menu_Label.setObjectName("Menu_Label")
        self.Header_Label = QtWidgets.QLabel(self.centralwidget)
        self.Header_Label.setGeometry(QtCore.QRect(0, 0, 1091, 71))
        font = QtGui.QFont()
        font.setFamily("Rage Italic")
        font.setPointSize(24)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.Header_Label.setFont(font)
        self.Header_Label.setStyleSheet("background-color: rgb(0, 8, 66);\n"
"background-color: rgb(92, 255, 228);\n"
"background-color: rgb(40, 145, 166);")
        self.Header_Label.setText("")
        self.Header_Label.setTextFormat(QtCore.Qt.RichText)
        self.Header_Label.setPixmap(QtGui.QPixmap(":/Logo/header.jpg"))
        self.Header_Label.setScaledContents(True)
        self.Header_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Header_Label.setObjectName("Header_Label")
        self.Sort_Label = QtWidgets.QLabel(self.centralwidget)
        self.Sort_Label.setGeometry(QtCore.QRect(950, 70, 141, 471))
        self.Sort_Label.setStyleSheet("background-color: rgb(0, 8, 67);")
        self.Sort_Label.setText("")
        self.Sort_Label.setObjectName("Sort_Label")
        self.Account_Label = QtWidgets.QLabel(self.centralwidget)
        self.Account_Label.setGeometry(QtCore.QRect(1020, 10, 61, 61))
        self.Account_Label.setText("")
        self.Account_Label.setPixmap(QtGui.QPixmap(":/Account/account.png"))
        self.Account_Label.setScaledContents(True)
        self.Account_Label.setObjectName("Account_Label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 51, 51))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap(":/Menu/menu.png"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(40, 110, 121, 31))
        self.pushButton.setAutoFillBackground(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Map/map.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 180, 121, 31))
        self.pushButton_2.setAutoFillBackground(False)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Search/search-more.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 260, 31, 31))
        self.label_7.setText("")
        self.label_7.setPixmap(QtGui.QPixmap(":/Arrow/arrow.png"))
        self.label_7.setScaledContents(True)
        self.label_7.setObjectName("label_7")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(40, 260, 121, 31))
        self.pushButton_3.setAutoFillBackground(False)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/CRUD/CRUD.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon2)
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(166, 70, 781, 471))
        self.label_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.Start = QtWidgets.QPushButton(self.centralwidget)
        self.Start.setGeometry(QtCore.QRect(740, 300, 75, 41))
        self.Start.setIcon(icon1)
        self.Start.setCheckable(False)
        self.Start.setObjectName("Start")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(240, 150, 671, 31))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(240, 110, 121, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(18)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.Stop = QtWidgets.QPushButton(self.centralwidget)
        self.Stop.setGeometry(QtCore.QRect(340, 300, 75, 41))
        self.Stop.setIcon(icon1)
        self.Stop.setCheckable(False)
        self.Stop.setObjectName("Stop")
        self.label.raise_()
        self.Menu_Label.raise_()
        self.Header_Label.raise_()
        self.Sort_Label.raise_()
        self.Account_Label.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.label_7.raise_()
        self.label_2.raise_()
        self.pushButton_3.raise_()
        self.label_3.raise_()
        self.Start.raise_()
        self.progressBar.raise_()
        self.label_4.raise_()
        self.Stop.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.Start.clicked.connect(self.doActionStart)
        self.Stop.clicked.connect(self.doActionStop)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # self. progressbar. setValue((lenofarrar/80000)Ã—100)
    def Scrapping_code( self):
        Name = []
        Compund_CID=[]
        IUPAC_1 = []
        Molecular_Formula=[]
        Molecular_weight=[]
        Create_date = []
        count = 0
        val=0


        for i in range(1,500):
                urls = 'https://pubchem.ncbi.nlm.nih.gov/#query=drug&page='+str(i)+''
                driver=webdriver.Chrome(executable_path='C:\Program Files (x86)\chromedriver.exe')
                driver.get(urls)
                sleep(8)
                content = driver.page_source
                soup = BeautifulSoup(content, 'html.parser')
                data = soup.findAll('ul',{'class':'unstyled-list'})
                d = data[1].findAll('li',{'class':'p-md-bottom'})
                for s in d:
    # Find IUPAC Name from Website
                        Iupac_names = s.findAll('div',{'class':'f-0875'})
                        for dj in range(0,len(Iupac_names)):    
                                Iupacc = Iupac_names[3].findAll('div',{'class':'p-xsm-top p-xsm-bottom inline-block'})
                                index1=0
                                for se in Iupacc:
                                        if(index1 == 0):
                                                inv1=se.find('span',{'class':''})
                                                IUPAC_1.append(inv1.text)
                                                count = count+ 1
                                                print(count)
                                                index1=+1
                                        if(index1==1):
                                                # print(" ")
                                                index1=0
                                        break
                                break
                Cdate = s.findAll('div',{'class':'f-0875'})
                for dj in range(0,len(Cdate)):    
                        cdate = Cdate[8].findAll('div',{'class':'p-xsm-top p-xsm-bottom inline-block'})
                        index1=0
                        for se in cdate:
                                if(index1 == 0):
                                        inv1=se.find('span',{'class':''})
                                        Create_date.append(inv1.text)
                                        index1=+1
                                if(index1==1):
                                        index1=0
                                break
                        break
        
                c_cid = s.find('div',{'class':'p-xsm-top p-xsm-bottom inline-block'})
                c1 = c_cid.find('a')
                Compund_CID.append(c1.text) 
#       Find Molecular Weight From Website
                weight = s.findAll('div',{'class':'f-0875'})
#    print(weight,BeautifulSoup)
                for dj in range(0,len(weight)):    
                        Molecular_weighteight1 = weight[1].findAll('div',{'class':'p-xsm-top p-xsm-bottom inline-block'})
                        index = 0
                        Molecular_Formula.append(Molecular_weighteight1[0].text)
                        Molecular_weight.append(Molecular_weighteight1[1].text)
                        break        
#       Find Name of the Compund from website 
                name1 = s.find('div',{'class':'f-medium p-sm-top p-sm-bottom f-1125'})
                if name1 == None:
                        Name.append("Not Avaliable")
                        Molecular_Formula.pop()
                        Molecular_weight.pop()
                        IUPAC_1.pop()
                        Compund_CID.pop()
                        Create_date.pop()
                else:
                        n1 = name1.find('span',{'class':'breakword'})
                        Name.append(n1.text)
                print(len(Name))
                if len(Name)%50==0:
                        val+=1
                        self.progressBar.setValue(val)
                df = pd.DataFrame(zip(Name,Molecular_Formula, Molecular_weight,IUPAC_1 , Compund_CID,Create_date))
                df.to_csv('All Store Medicine.csv', index = True,mode='a')
                Name.clear()
                Molecular_Formula.clear()
                Molecular_weight.clear()
                IUPAC_1.clear()
                Compund_CID.clear()
                Create_date.clear()
    def doActionStop(self):
        print(self.setupUi.x)
        self.progressBar.setvalue()
    def doActionStart(self):
        self.Scrapping_code()     


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#ffffff;\">Copyright @ [Yasir , Moazam &amp; 2022]</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Medicines"))
        self.pushButton_2.setText(_translate("MainWindow", "Search"))
        self.pushButton_3.setText(_translate("MainWindow", "Scrapping"))
        self.Start.setText(_translate("MainWindow", "Start"))
        self.label_4.setText(_translate("MainWindow", "Progress :"))
        self.Stop.setText(_translate("MainWindow", "Stop"))
import resources


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_ScrappingWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
